#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

/*  0  1  2  3  4        5  6  7  8  9 */
/* 10 11 12 13 14       15 16 17 18 19 */
/* 20 21 22 23 24       25 26 27 28 29 */
/*             30 31 32 33 */


#define LH_KEYS  0  1  2  3  4 \
                10 11 12 13 14 \
                20 21 22 23 24 \

#define RH_KEYS     5  6  7  8 9 \
                   15 16 17 18 19 \
                   25 26 27 28 29 \

#define T_KEYS 30 31 32 33

// Layer definitions
#define BASE 0
#define NUM 1
#define NAV 2
#define FUN 3
// -----------------

/ {
  combos {
    compatible = "zmk,combos";
    combo_esc {
      timeout-ms = <25>;
      key-positions = <1 2>;
      bindings = <&kp ESC>;
    };
    combo_tab {
      timeout-ms = <25>;
      key-positions = <11 12>;
      bindings = <&kp TAB>;
    };
    combo_bspc {
      timeout-ms = <25>;
      key-positions = <7 8>;
      bindings = <&kp BSPC>;
    };
    combo_del {
      timeout-ms = <25>;
      key-positions = <8 9>;
      bindings = <&kp DEL>;
    };
    combo_ret {
      timeout-ms = <25>;
      key-positions = <17 18>;
      bindings = <&kp RET>;
    };
  };

  behaviors {
    hml: home_row_mod_left {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      flavor = "balanced";
      require-prior-idle-ms = <125>;
      tapping-term-ms       = <225>;
      quick-tap-ms          = <175>;
      bindings = <&kp>, <&kp>;
      hold-trigger-key-positions = <RH_KEYS T_KEYS>;
      hold-trigger-on-release;
    };
    hmr: home_row_mod_right {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      flavor = "balanced";
      require-prior-idle-ms = <125>;
      tapping-term-ms       = <225>;
      quick-tap-ms          = <175>;
      bindings = <&kp>, <&kp>;
      hold-trigger-key-positions = <LH_KEYS T_KEYS>;
      hold-trigger-on-release;
    };
  };

  keymap {
    compatible = "zmk,keymap";
    default_layer {
      label = "BASE";
      bindings = <
        &kp Q       &kp W       &kp E       &kp R       &kp T                &kp Y &kp U       &kp I           &kp O         &kp P
        &kp A       &kp S       &kp D       &kp F       &kp G                &kp H &kp J       &kp K           &kp L         &kp SEMI
        &hml LSFT Z &hml LCTL X &hml LALT C &hml LGUI V &kp B                &kp N &hmr RGUI M &hmr RALT COMMA &hmr RCTL DOT &hmr RSFT FLSH
                                                        &sk LSFT &mo 2 &mo 1 &kp SPACE
      >;
    };
    num_layer {
      label = "NUM";
      bindings = <
        &trans   &trans   &trans   &trans   &trans              &kp STAR &kp N7 &kp N8 &kp N9 &kp MINUS
        &trans   &trans   &trans   &trans   &trans              &kp FSLH &kp N4 &kp N5 &kp N6 &kp PLUS
        &kp LSFT &kp LCTL &kp LALT &kp LGUI &trans              &kp N0   &kp N1 &kp N2 &kp N3 &kp EQUAL
                                            &trans &mo 3 &trans &trans
      >;
    };
    nav_layer {
      label = "NAV";
      bindings = <
        &kp TILDE &kp RBRC  &kp RBKT &kp RPAR &trans              &trans   &trans   &trans   &trans    &kp BSLH
        &kp GRAVE &kp LBRC  &kp LBKT &kp LPAR &trans              &kp LEFT &kp DOWN &kp UP   &kp RIGHT &kp SQT
        &kp LSFT  &kp LCTL  &kp LALT &kp LGUI &trans              &trans   &kp RGUI &kp RALT &kp RCTL  &kp RSFT
                                              &trans &trans &mo 3 &trans
      >;
    };

    // Function keys with modifiers
    fun_layer {
      label = "FUN";
      bindings = <
        &kp F10    &kp F7 &kp F8 &kp F9 &bt BT_SEL 1               &trans     &kp C_BRI_DN &kp C_BRI_UP &trans     &kp C_PP
        &kp F11    &kp F4 &kp F5 &kp F6 &bt BT_SEL 2               &kp C_PREV &kp C_VOL_DN &kp C_VOL_UP &kp C_NEXT &trans
        &sys_reset &kp F1 &kp F2 &kp F3 &bt BT_CLR                 &trans     &kp C_MUTE   &trans       &trans     &sys_reset
                                        &bootloader  &trans &trans &bootloader
      >;
    };
  };
};
